{"version":3,"file":"react-native-outside.min.js","sources":["../../src/ActiveBoundary.tsx","../../src/Active.tsx"],"sourcesContent":["import React from 'react';\nimport { useEvent } from 'react-native-event';\nimport contains from 'react-native-contains';\nimport { BoundaryProvider, useBoundary, useRef } from 'react-ref-boundary';\n\nfunction Component({ children, isActive, setIsActive }) {\n  const ref = useRef<HTMLElement>(null);\n  const boundary = useBoundary();\n  useEvent(\n    (event) => {\n      if (!isActive) return;\n      for (let i = 0; i < boundary.refs.length; i++) {\n        const x = boundary.refs[i] as React.RefObject<HTMLElement>;\n        if (x.current && contains(x.current, event.target)) return;\n      }\n      setIsActive(false);\n    },\n    [isActive, setIsActive],\n  );\n\n  return (\n    <React.Fragment>\n      {React.Children.map<React.ReactNode, React.ReactNode>(children, (child) =>\n        React.isValidElement(child)\n          ? React.cloneElement(child, { isActive, setIsActive, ref })\n          : child,\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default function ActiveBoundary({ children }) {\n  const state = React.useState<boolean>(false);\n  const isActive = state[0];\n  const setIsActive = state[1];\n\n  return (\n    <BoundaryProvider>\n      <Component isActive={isActive} setIsActive={setIsActive}>\n        {children}\n      </Component>\n    </BoundaryProvider>\n  );\n}\n","import React from 'react';\nimport { useEvent } from 'react-native-event';\nimport contains from 'react-native-contains';\n\nexport default function Active({ children }) {\n  const state = React.useState<boolean>(false);\n  const isActive = state[0];\n  const setIsActive = state[1];\n  const ref = React.useRef<HTMLElement>(null);\n  useEvent(\n    (event) => {\n      if (!isActive) return;\n      if (ref.current && contains(ref.current, event.target)) return;\n      setIsActive(false);\n    },\n    [isActive, setIsActive],\n  );\n\n  return (\n    <React.Fragment>\n      {React.Children.map<React.ReactNode, React.ReactNode>(children, (child) =>\n        React.isValidElement(child)\n          ? React.cloneElement(child, { isActive, setIsActive, ref })\n          : child,\n      )}\n    </React.Fragment>\n  );\n}\n"],"names":["Component","param","children","isActive","setIsActive","ref","useRef","boundary","useBoundary","useEvent","event","i","refs","length","x","current","contains","target","React","Fragment","Children","map","child","isValidElement","cloneElement","state","useState","BoundaryProvider","createElement"],"mappings":"wlBAKA,SAASA,EAAUC,GAAEC,IAAAA,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,SAAUC,EAAtBH,EAAsBG,YACjCC,EAAMC,SAAoB,MAC1BC,EAAWC,EAAAA,cAajB,OAZAC,EAAQA,UACN,SAACC,GACC,GAAKP,EAAL,CACA,IAAK,IAAIQ,EAAI,EAAGA,EAAIJ,EAASK,KAAKC,OAAQF,IAAK,CAC7C,IAAMG,EAAIP,EAASK,KAAKD,GACxB,GAAIG,EAAEC,SAAWC,UAASF,EAAEC,QAASL,EAAMO,QAAS,OAEtDb,GAAY,MAEd,CAACD,EAAUC,IAIXc,UAACA,cAAAA,EAAK,QAACC,cACJD,EAAK,QAACE,SAASC,IAAsCnB,GAAU,SAACoB,UAC/DJ,EAAAA,QAAMK,eAAeD,GACjBJ,EAAK,QAACM,aAAaF,EAAO,CAAEnB,SAAAA,EAAUC,YAAAA,EAAaC,IAAAA,IACnDiB,eCrBG,SAAgBrB,GAAA,IAAEC,EAAFD,EAAEC,SACzBuB,EAAQP,EAAAA,QAAMQ,UAAkB,GAChCvB,EAAWsB,EAAM,GACjBrB,EAAcqB,EAAM,GACpBpB,EAAMa,EAAAA,QAAMZ,OAAoB,MAUtC,OATAG,EAAQA,UACN,SAACC,GACMP,IACDE,EAAIU,SAAWC,UAASX,EAAIU,QAASL,EAAMO,SAC/Cb,GAAY,MAEd,CAACD,EAAUC,IAIXc,UAACA,cAAAA,EAAK,QAACC,cACJD,EAAK,QAACE,SAASC,IAAsCnB,GAAU,SAACoB,UAC/DJ,EAAAA,QAAMK,eAAeD,GACjBJ,EAAK,QAACM,aAAaF,EAAO,CAAEnB,SAAAA,EAAUC,YAAAA,EAAaC,IAAAA,IACnDiB,wBDQG,SAAwBrB,GAAA,IAAEC,EAAFD,EAAEC,SACjCuB,EAAQP,EAAAA,QAAMQ,UAAkB,GAChCvB,EAAWsB,EAAM,GACjBrB,EAAcqB,EAAM,GAE1B,OACEP,EAAAA,QAACS,cAAAA,EAAgBA,iBACf,KAAAT,EAAA,QAAAU,cAAC5B,EAAS,CAACG,SAAUA,EAAUC,YAAaA,GACzCF"}